from typing import Text, Any, Union, Optional, Iterator, List
import datetime

class Redis(object):
    """Type stubs for redis"""

    def __init__(
        self,
        host: Text = ...,
        port: int = ...,
        db: int = ...,
        decode_responses: bool = ...,
    ) -> None: ...
    def hget(self, name: Union[Text, bytes], key: Union[Text, bytes]) -> Any: ...
    def hset(
        self,
        name: Union[Text, bytes],
        key: Union[Text, bytes],
        value: Union[Text, int, bytes],
    ) -> Any: ...
    def hmget(
        self, name: Union[Text, bytes], *keys: Union[Text, bytes]
    ) -> List[Any]: ...
    def flushdb(self) -> bool: ...
    def setex(
        self,
        name: Union[Text, bytes],
        time: datetime.timedelta,
        value: Union[Text, bytes],
    ) -> Any: ...
    def get(self, name: Union[Text, bytes]) -> Any: ...
    def pipeline(self, transaction: Any = ..., shard_hint: Any = ...) -> Pipeline: ...
    def scan_iter(
        self, match: Optional[Text] = ..., count: Optional[int] = ...
    ) -> Iterator[Any]: ...

class BasePipeline:
    def __init__(
        self,
        connection_pool: Any,
        response_callbacks: Any,
        transaction: Any,
        shard_hint: Any,
    ) -> None: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> Any: ...
    def __del__(self) -> Any: ...
    def __len__(self) -> Any: ...

class Pipeline(BasePipeline, Redis): ...
